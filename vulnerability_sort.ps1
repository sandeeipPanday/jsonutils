# Load Excel COM object
$Excel = New-Object -ComObject Excel.Application
$Excel.Visible = $false

# Open the Excel file
$FilePath = "C:\path\to\your\file.xlsx"  # Update with your actual file path
$Workbook = $Excel.Workbooks.Open($FilePath)
$Sheet = $Workbook.Sheets.Item(1)

# Read data into a PowerShell object
$UsedRange = $Sheet.UsedRange
$RowCount = $UsedRange.Rows.Count

$Data = @()
for ($i = 2; $i -le $RowCount; $i++) {  # Assuming first row contains headers
    $namespace = $Sheet.Cells.Item($i, 1).Text
    $vulnerabilityid = $Sheet.Cells.Item($i, 2).Text
    $updatetimestamp = [datetime]$Sheet.Cells.Item($i, 3).Text

    $Data += [PSCustomObject]@{
        namespace = $namespace
        vulnerabilityid = $vulnerabilityid
        updatetimestamp = $updatetimestamp
    }
}

# Filter duplicates and keep the latest update timestamp
$FilteredData = $Data | Sort-Object namespace, vulnerabilityid, updatetimestamp -Descending |
                Group-Object namespace, vulnerabilityid |
                ForEach-Object { $_.Group[0] }

# Write back to Excel
$i = 2
foreach ($Entry in $FilteredData) {
    $Sheet.Cells.Item($i, 1).Value2 = $Entry.namespace
    $Sheet.Cells.Item($i, 2).Value2 = $Entry.vulnerabilityid
    $Sheet.Cells.Item($i, 3).Value2 = $Entry.updatetimestamp.ToString("yyyy-MM-dd HH:mm:ss")
    $i++
}

# Remove extra rows
for ($j = $i; $j -le $RowCount; $j++) {
    $Sheet.Rows.Item($j).Delete()
}

# Save and close Excel
$Workbook.Save()
$Workbook.Close($false)
$Excel.Quit()

# Release COM object
[System.Runtime.Interopservices.Marshal]::ReleaseComObject($Sheet) | Out-Null
[System.Runtime.Interopservices.Marshal]::ReleaseComObject($Workbook) | Out-Null
[System.Runtime.Interopservices.Marshal]::ReleaseComObject($Excel) | Out-Null

Write-Output "Duplicates removed, latest timestamps kept!"
